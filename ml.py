"Perform machine learning on preprocessed data"

import sys
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
from catboost import CatBoostClassifier
import lightgbm
from glob import glob

def ml(method, filename_postfix, to_submit=False):
    # todo: usecols
    print('Reading training data')
    X_train = pd.read_csv('train%s.csv' % filename_postfix, index_col='MachineIdentifier')
    y_train = X_train['HasDetections']
    X_train.drop('HasDetections', axis=1, inplace=True)

    X_train, X_test, y_train, y_test = \
        train_test_split(X_train, y_train, test_size=0.10, random_state=12)

    print('Preparing to fit')
    if method == 'RF':
        clf = RandomForestClassifier(n_estimators=15, max_depth=4,
                                 random_state=42, n_jobs=8)
    elif method == 'SVC':
        clf = SVC(kernel='rbf', gamma='auto', C=1, probability=True)
    elif method == 'logit':
        clf = LogisticRegression(random_state=0, solver='sag',
            n_jobs=8, max_iter=1000)
    elif method == 'CatBoost':
        clf = CatBoostClassifier(iterations=20, learning_rate=0.1, depth=5, custom_metric = ['Logloss', 'AUC:hints=skip_train~false'])
        #loss_function='Logloss'
    elif method == 'LGBM':
        # categorical_features = [c for c, col in enumerate(train.columns) if 'cat' in col]
        X_train, X_valid, y_train, y_valid = \
             train_test_split(X_train, y_train, test_size=0.20, random_state=12)
        categorical_features = 'auto' 
        train_data = lightgbm.Dataset(X_train, label=y_train, categorical_feature=categorical_features)
        valid_data = lightgbm.Dataset(X_valid, label=y_valid)
        parameters = {
            'application': 'binary',
            'objective': 'binary',
            'metric': 'auc',
            'is_unbalance': 'true',
            'boosting': 'gbdt',
            'num_leaves': 31,
            'feature_fraction': 0.5,
            'bagging_fraction': 0.5,
            'bagging_freq': 20,
            'learning_rate': 0.05,
            'verbose': 0
        }
        clf = lightgbm.train(parameters,
                             train_data,
                             valid_sets=valid_data,
                             num_boost_round=5000,
                             early_stopping_rounds=100)

 
    if method not in ['LGBM']:
        print('Fitting; fit method = %s' % method)
        clf.fit(X_train, y_train)  
        print('Fit done')

    y_test = y_test.tolist()
    y_pred = clf.predict(X_test)
    roc_auc = metrics.roc_auc_score(y_test, y_pred)
    print('ROC AUC = ', roc_auc)
    print(y_pred)

    if not to_submit:
        return

    train_columns = X_train.columns.tolist()
    filenames = glob('chunked/test*%s.csv' % filename_postfix)
    filenames.sort()
    print(filenames)
    w_filename = 'submissions/submission_%s%s_%0.3f.csv' % (method, filename_postfix, roc_auc)
    with open(w_filename, 'w') as fw:
        fw.write('MachineIdentifier,HasDetections\n')
        for filename in filenames:
            print('Processing %s' % filename)
            X_test = pd.read_csv(filename, index_col='MachineIdentifier')
            test_columns = X_test.columns.tolist()
            for train_column in train_columns:
                if train_column not in test_columns:
                    X_test[train_column] = 0.
            X_test = X_test[train_columns]
            if method=='LGBM':
                probas = clf.predict(X_test)
                for mi, pr in zip(X_test.index.tolist(), probas):
                    fw.write('%s,%f\n' % (mi, pr))
            else:
                probas = clf.predict_proba(X_test)
                # y_pred = clf.predict(X_test)
                index_of_1 = 0 if clf.classes_[0]==1.0 else 1
                for mi, pr in zip(X_test.index.tolist(), probas):
                    fw.write('%s,%f\n' % (mi, pr[index_of_1]))
    print('Submission written to %s' % w_filename)


if __name__=='__main__':
    to_preproc, to_submit = False, False
    filename_postfix = '_onehot'
    method = 'logit'
    if len(sys.argv)>=2:
        to_preproc = 'preproc' in sys.argv[1:]
        to_submit = 'submit' in sys.argv[1:]
        for s in sys.argv[1:]:
            if s[0] == '_':
                filename_postfix = s
            if s in ['logit', 'CatBoost', 'RF', 'SVC', 'LGBM']:
                method = s
    print(filename_postfix)
    print(method)

    ml(method, filename_postfix, to_submit)



